name: Log Commit Messages with Structured Logs

on:
  push:
    branches:
      - main
      - dev

jobs:
  log_commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Parse commit messages and organize logs
        shell: bash
        run: |
          # Créer le dossier principal si non existant
          mkdir -p log_commit
          echo "Dossier log_commit créé."

          # Extraire les messages de commit depuis le fichier d'événement, un par ligne
          commit_messages=$(jq -r '.commits[].message' "$GITHUB_EVENT_PATH")
          echo "Commit messages trouvés :"
          echo "$commit_messages"

          # Traiter chaque message de commit
          echo "$commit_messages" | while IFS= read -r msg; do
              # Sauter si le message est vide
              if [ -z "$msg" ]; then
                  continue
              fi

              # Extraire le premier mot
              first_word=$(echo "$msg" | awk '{print $1}')
              # Extraire le deuxième mot
              second_word=$(echo "$msg" | awk '{print $2}')
              # Si le deuxième mot est vide, le définir à "unknown"
              if [ -z "$second_word" ]; then
                  second_word="unknown"
              fi
              echo "Traitement du commit : '$msg'"
              echo "Premier mot : $first_word, Deuxième mot : $second_word"

              # Créer le sous-dossier correspondant
              mkdir -p "log_commit/${first_word}/${second_word}"
              # Ajouter le message dans le fichier log_commit.md dans ce sous-dossier
              echo "$msg" >> "log_commit/${first_word}/${second_word}/log_commit.md"
          done

          # Afficher la structure du dossier log_commit pour vérification
          echo "Structure du dossier log_commit :"
          find log_commit
